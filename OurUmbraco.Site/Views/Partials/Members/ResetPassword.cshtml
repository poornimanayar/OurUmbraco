@using OurUmbraco.Our.Controllers
@using reCAPTCHA.MVC
@inherits UmbracoViewPage<OurUmbraco.Our.Models.PasswordResetModel>
@{
    Html.EnableClientValidation(true);
    Html.EnableUnobtrusiveJavaScript(true);
}

@if (string.IsNullOrWhiteSpace(Model.Error))
{
    if (Model.Email != null && Model.Token != null)
    {
        <div class="form simpleForm" id="registrationForm">
            @using (Html.BeginUmbracoForm<ResetPasswordController>("ResetPassword"))
            {
                @Html.ValidationSummary(false)

                @Html.AntiForgeryToken()

                <fieldset>
                    <p>
                        @Html.LabelFor(m => m.NewPassword, new { @class = "inputLabel" })<br />
                        @Html.ValidationMessageFor(m => m.NewPassword)

                        @Html.PasswordFor(m => m.NewPassword, new { @class = "title" })
                    </p>
                </fieldset>

                <fieldset>
                    <p>
                        @Html.Recaptcha()
                        @Html.ValidationMessage("ReCaptcha")
                    </p>
                </fieldset>
                @Html.HiddenFor(m => m.Email)
                @Html.HiddenFor(m => m.Token)
                <input class="button green" type="submit" value="Set new password">
            }
        </div>
    }
    else
    {
        <p>You can now <a href="/member/login?redirectUrl=%2f">log in</a> with your new password.</p>
        <p>&nbsp;</p>
        <p>&nbsp;</p>
    }
}
else
{
    <p style="color: red;">@Model.Error</p>
    <p>&nbsp;</p>
    <p>&nbsp;</p>
}

<style type="text/css">
    .field-validation-error, .validation-summary-errors {
        color: red;
    }

    .input-validation-error {
        border-color: red !important;
    }

    .validation-summary-errors li {
        color: red;
    }
</style>
